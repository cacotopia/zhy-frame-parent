<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>zhy-frame-ops</artifactId>
        <groupId>com.zhy.frame</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>zhy-frame-ops-docker</artifactId>
    <properties>
        <!--私服ip-->
        <dockerRegistryIp>192.168.1.181</dockerRegistryIp>
        <!--tag 端口-->
        <dockerTagPort>5000</dockerTagPort>
        <!--push 端口-->
        <dockerPushPort>2375</dockerPushPort>
        <!--项目属于一个大的分类-->
        <namespace>frame</namespace>
        <!--docker images-->
        <dockerImageName>${project.artifactId}:${project.version}</dockerImageName>
        <!--dockerFile 中 jar名称-->
        <dockerFileName>${project.artifactId}-${project.version}</dockerFileName>
        <!--docker tag-->
        <dockerImageTag>
            ${dockerRegistryIp}:${dockerTagPort}/${namespace}/${project.artifactId}:${project.version}
        </dockerImageTag>
        <!--docker host-->
        <dockerHost>http://${dockerRegistryIp}:${dockerPushPort}</dockerHost>
    </properties>
    <dependencies>
        <dependency>
            <groupId>com.zhy.frame</groupId>
            <artifactId>zhy-frame-core</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-model</artifactId>
            <version>3.0</version>
        </dependency>
    </dependencies>

    <!-- <build>
         <plugins>
             <plugin>
                 <groupId>org.springframework.boot</groupId>
                 <artifactId>spring-boot-maven-plugin</artifactId>
                 &lt;!&ndash;这里写上main方法所在类的路径&ndash;&gt;
                 <configuration>
                     &lt;!&ndash;com.kismet.p2p.APPConfig即mainClass&ndash;&gt;
                     <mainClass>com.zhy.frame.ops.docker.application.DockerApplication</mainClass>
                 </configuration>
                 <executions>
                     <execution>
                         <goals>
                             <goal>repackage</goal>
                         </goals>
                     </execution>
                 </executions>
             </plugin>
             <plugin>
                 <groupId>com.spotify</groupId>
                 <artifactId>docker-maven-plugin</artifactId>
                 <version>0.4.3</version>
                 <executions>
                     <execution>
                         <id>build-image</id>     &lt;!&ndash;定义一个执行命令的id&ndash;&gt;
                         <phase>package</phase>   &lt;!&ndash;绑定mvn的哪个命令&ndash;&gt;
                         <goals>
                             <goal>build</goal>   &lt;!&ndash;要执行的命令 &ndash;&gt;
                         </goals>
                     </execution>
                     <execution>
                         <id>image-tag</id>
                         <phase>package</phase>
                         <goals>
                             <goal>tag</goal>      &lt;!&ndash;tag命令，相当于docker的tag命令&ndash;&gt;
                         </goals>
                         <configuration>
                             <image>${dockerImageName}</image>   &lt;!&ndash;镜像名&ndash;&gt;
                             <newName>${dockerImageTag}</newName>   &lt;!&ndash;打的标签名&ndash;&gt;
                         </configuration>
                     </execution>
                     <execution>
                         <id>package-push</id>
                         <phase>package</phase>
                         <goals>
                             <goal>push</goal>    &lt;!&ndash;相当于docker的push命令&ndash;&gt;
                         </goals>
                         <configuration>
                             <imageName>${dockerImageTag}</imageName>  &lt;!&ndash;要push的镜像名&ndash;&gt;
                         </configuration>
                     </execution>
                 </executions>
                 <configuration>
                     <imageName>${dockerImageName}</imageName>
                     <baseImage>java</baseImage>
                     &lt;!&ndash;<entryPoint>["java","-jar","/${project.build.finalName}.jar}"]</entryPoint>&ndash;&gt;
                     <dockerDirectory>${project.basedir}/src/main/resources</dockerDirectory>
                     <dockerHost>${dockerHost}</dockerHost>
                     <resources>
                         <resource>
                             <targetPath>/</targetPath>
                             <directory>${project.build.directory}</directory>
                             <include>${project.build.finalName}.jar</include>
                         </resource>
                     </resources>
                 </configuration>
             </plugin>
         </plugins>


         <resources>
             <resource>
                 <directory>src/main/resources</directory>
                 <filtering>true</filtering>
                 <includes>
                     <include>**/**</include>
                 </includes>
             </resource>
             <resource>
                 <directory>src/main/java</directory>
                 <excludes>
                     <exclude>**/*.java</exclude>
                 </excludes>
             </resource>
         </resources>
     </build>
 -->
</project>